import{_ as e,c as a,o as t,a3 as o}from"./chunks/framework.BU7x9Ys0.js";const m=JSON.parse('{"title":"Vue 组件封装案例合集","description":"","frontmatter":{},"headers":[],"relativePath":"Vue/component/002.md","filePath":"Vue/component/002.md","lastUpdated":1713773174000}'),r={name:"Vue/component/002.md"},n=o('<h1 id="vue-组件封装案例合集" tabindex="-1">Vue 组件封装案例合集 <a class="header-anchor" href="#vue-组件封装案例合集" aria-label="Permalink to &quot;Vue 组件封装案例合集&quot;">​</a></h1><h2 id="一-vue3-版日历组件封装案例" tabindex="-1">一. Vue3 版日历组件封装案例 <a class="header-anchor" href="#一-vue3-版日历组件封装案例" aria-label="Permalink to &quot;一. Vue3 版日历组件封装案例&quot;">​</a></h2><h3 id="_1-项目说明" tabindex="-1">1. 项目说明 <a class="header-anchor" href="#_1-项目说明" aria-label="Permalink to &quot;1. 项目说明&quot;">​</a></h3><p>在 2020 年 Vue2 版日历组件的基础上，使用新的 Vue3 和面向对象（下称 oop）的方式重构而来。</p><p>Vue3 更新到 3.2 版本后，确定了<code>&lt;script setup&gt;</code>语法糖的正式地位，对于习惯了 2.6 的开发人员创造了切入新版本的机会。在这个背景下，我决定通过重构的方式练习 Vue3 的新特性。</p><p>同时鉴于 TS 在开发中的作用在逐渐提升，本次重构使用ES6的oop方式为后期改造为 TS 版留下升级空间。</p><h3 id="_2-日历的算法" tabindex="-1">2.日历的算法 <a class="header-anchor" href="#_2-日历的算法" aria-label="Permalink to &quot;2.日历的算法&quot;">​</a></h3><p>日历算法是日历组件的核心和难点，本次重构优化了原来的算法。</p>',8),c=[n];function s(_,i,u,d,l,p){return t(),a("div",null,c)}const V=e(r,[["render",s]]);export{m as __pageData,V as default};
