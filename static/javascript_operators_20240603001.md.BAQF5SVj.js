import{_ as e,c as o,o as t,aR as c}from"./chunks/framework.D7YY5ITm.js";const w=JSON.parse('{"title":"知识点速查","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/operators/20240603001.md","filePath":"javascript/operators/20240603001.md","lastUpdated":1717904896000}'),a={name:"javascript/operators/20240603001.md"},d=c('<h1 id="知识点速查" tabindex="-1">知识点速查 <a class="header-anchor" href="#知识点速查" aria-label="Permalink to &quot;知识点速查&quot;">​</a></h1><h2 id="_1-关于关键字-new" tabindex="-1">1. 关于关键字 <code>new</code> <a class="header-anchor" href="#_1-关于关键字-new" aria-label="Permalink to &quot;1. 关于关键字 `new`&quot;">​</a></h2><p>当使用 <code>new</code> 关键字调用函数时，该函数将被用作构造函数。<code>new</code> 将执行以下操作：</p><ol><li><p>创建一个空的简单 JavaScript 对象。为方便起见，我们称之为 <code>newInstance。</code></p></li><li><p>如果构造函数的 <code>prototype</code> 属性是一个对象，则将 <code>newInstance</code> 的 [[Prototype]] 指向构造函数的 <code>prototype</code> 属性，否则 <code>newInstance</code> 将保持为一个普通对象，其 [[Prototype]] 为 <code>Object.prototype</code>。</p></li></ol><div class="tip custom-block"><p class="custom-block-title">备注</p><p>因此，通过构造函数创建的所有实例都可以访问添加到构造函数 <code>prototype</code> 属性中的属性/对象。</p></div><ol start="3"><li><p>使用给定参数执行构造函数，并将 <code>newInstance</code> 绑定为 <code>this</code> 的上下文（换句话说，在构造函数中的所有 <code>this</code> 引用都指向 <code>newInstance</code>）。</p></li><li><p>如果构造函数返回非原始值，则该返回值成为整个 <code>new</code> 表达式的结果。否则，如果构造函数未返回任何值或返回了一个原始值，则返回 <code>newInstance</code>。（通常构造函数不返回值，但可以选择返回值，以覆盖正常的对象创建过程。）</p></li></ol>',6),n=[d];function s(r,p,i,l,_,h){return t(),o("div",null,n)}const u=e(a,[["render",s]]);export{w as __pageData,u as default};
