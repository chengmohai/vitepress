import{_ as s,c as i,o as a,a6 as e}from"./chunks/framework.DvXRYole.js";const E=JSON.parse('{"title":"Git 总结","description":"","frontmatter":{},"headers":[],"relativePath":"others/002.md","filePath":"others/002.md","lastUpdated":1715521816000}'),n={name:"others/002.md"},t=e(`<h1 id="git-总结" tabindex="-1">Git 总结 <a class="header-anchor" href="#git-总结" aria-label="Permalink to &quot;Git 总结&quot;">​</a></h1><h2 id="_1-git-简介" tabindex="-1">1. Git 简介 <a class="header-anchor" href="#_1-git-简介" aria-label="Permalink to &quot;1. Git 简介&quot;">​</a></h2><h3 id="_1-1-关于-git" tabindex="-1">1.1 关于 Git <a class="header-anchor" href="#_1-1-关于-git" aria-label="Permalink to &quot;1.1 关于 Git&quot;">​</a></h3><p>Git 是目前世界上最先进的 <strong>分布式</strong> <strong>版本控制</strong> 系统</p><h4 id="什么是版本控制" tabindex="-1">什么是版本控制 <a class="header-anchor" href="#什么是版本控制" aria-label="Permalink to &quot;什么是版本控制&quot;">​</a></h4><p>类似于多人共写文档,记录了每个提交者修改过哪些部分,类似这个样子:</p><table><thead><tr><th>版本</th><th>文件名</th><th>用户</th><th>说明</th><th>日期</th></tr></thead><tbody><tr><td>1</td><td>service.doc</td><td>张三</td><td>删除了软件服务条款 5</td><td>7/12 10:38</td></tr><tr><td>2</td><td>service.doc</td><td>张三</td><td>增加了 License 人数限制</td><td>7/12 18:09</td></tr><tr><td>3</td><td>service.doc</td><td>李四</td><td>财务部门调整了合同金额</td><td>7/13 9:51</td></tr><tr><td>4</td><td>service.doc</td><td>张三</td><td>延长了免费升级周期</td><td>7/14 15:17</td></tr></tbody></table><h4 id="什么是分布式" tabindex="-1">什么是分布式 <a class="header-anchor" href="#什么是分布式" aria-label="Permalink to &quot;什么是分布式&quot;">​</a></h4><p>先说集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。</p><p>分布式版本控制系统相对于集中式,具有</p><ol><li>不需要 <strong>中央服务器</strong> ,每个人的电脑都有一套完整的版本库</li><li>因为每个人都有完整的版本库, <strong>安全性</strong> 相对集中式较高</li></ol><hr><h3 id="_1-2-安装-git" tabindex="-1">1.2 安装 Git <a class="header-anchor" href="#_1-2-安装-git" aria-label="Permalink to &quot;1.2 安装 Git&quot;">​</a></h3><h4 id="linux-安装-略" tabindex="-1"><s>Linux 安装(略)</s> <a class="header-anchor" href="#linux-安装-略" aria-label="Permalink to &quot;~~Linux 安装(略)~~&quot;">​</a></h4><h4 id="macos-安装-略" tabindex="-1"><s>MacOS 安装(略)</s> <a class="header-anchor" href="#macos-安装-略" aria-label="Permalink to &quot;~~MacOS 安装(略)~~&quot;">​</a></h4><h4 id="window-安装" tabindex="-1">Window 安装 <a class="header-anchor" href="#window-安装" aria-label="Permalink to &quot;Window 安装&quot;">​</a></h4><p>直接从 Git 官网<a href="https://git-scm.com/" target="_blank" rel="noreferrer">下载安装程序</a>,一律默认选项安装</p><p>安装完成后需要进一步设置,在命令行输入:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global user.name </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your Name&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">global user.email </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email@email.com&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>因为是分布式版本控制系统,所以每个机器需要自报家门:名字和 Email 邮箱</p><p><code>git config</code> 命令的 <code>--global</code> 参数表示在这台机器上的所有 Git 仓库都使用这个配置,也可根据情况单独配置某个仓库的用户名和 Email 邮箱</p><h3 id="_1-3-创建版本库" tabindex="-1">1.3 创建版本库 <a class="header-anchor" href="#_1-3-创建版本库" aria-label="Permalink to &quot;1.3 创建版本库&quot;">​</a></h3><p>什么是版本库呢？版本库又名仓库，英文名 <strong>repository</strong> ，可以简单理解成一个目录，这个目录里面的所有文件都可以被 Git 管理起来，每个文件的修改、删除，Git 都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><p>第一步,需要建立一个 <u><strong>不包含中文字符</strong></u> 的空目录</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mkdir learngit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cd learngit</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>创建一个 readme.txt 文件并输入</p><blockquote><p>Git is a version control system. Git is free software.</p></blockquote><p>第二步,通过 <code>git init</code> 命令初始化该目录,使其成为 Git 可以管理的仓库</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="把文件添加到版本库" tabindex="-1">把文件添加到版本库 <a class="header-anchor" href="#把文件添加到版本库" aria-label="Permalink to &quot;把文件添加到版本库&quot;">​</a></h4><p>第一步,用命令 <code>git add</code> 告诉 Git,把文件添加到仓库</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> readme.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>第二步,用命令 <code>git commit</code>告诉 Git,把文件提交到仓库</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wrote a readme file&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>git commit</code> 命令使用 <code>-m</code>参数输入本次提交的说明 <code>git commit</code> 命令执行成功后提示</p><blockquote><p><code>1 file changed</code> :1 个文件被改动(添加了 readme.txt 文件); <code>2 insertions</code> :插入了两行内容(readme.txt 有两行内容)</p></blockquote><h2 id="_2-时光机穿梭" tabindex="-1">2. 时光机穿梭 <a class="header-anchor" href="#_2-时光机穿梭" aria-label="Permalink to &quot;2. 时光机穿梭&quot;">​</a></h2><p>修改 readme.txt</p><blockquote><p>Git is a distributed version control system. Git is free software.</p></blockquote><p>运行 <code>git status</code> 命令可以掌握仓库当前的状态 运行 <code>git diff</code> (difference)命令可以看到如何修改的 readme.txt 文件</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index d8036c1..7b4104a </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100644</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a/readme.txt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b/readme.txt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@@ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @@</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Git is a version control system.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Git is a distributed  version control system.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Git is free software.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\ No newline at </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> of file</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>然后可以继续使用 <code>git add</code>和 <code>git commit</code> 命令提交修改和提交新文件 再次使用 <code>git status</code> 命令查看当前状态</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">On branch master</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commit, working tree clean</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Git 告诉我们当前没有需要提交的修改，而且，工作目录是干净（working tree clean）的。</p><h3 id="_2-1-版本回退" tabindex="-1">2.1 版本回退 <a class="header-anchor" href="#_2-1-版本回退" aria-label="Permalink to &quot;2.1 版本回退&quot;">​</a></h3><p>每一个 <code>commit</code> 相当于一个存盘点 通过 <code>git log</code> 命令查看从远到近的提交日志 使用 <code>--pretty=oneline</code> 参数查看清爽版提交日志</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">06f055423edc1673566dfd9822bb0729e8dc1c02 (HEAD </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> master) append GPL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cdfc070d15b2339f1659c6fc09a137decbb34b64 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> word</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">9adc045c002e16ad6b1c172972f2cb830aa83dca readme.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>一大串十六进制的通过 SHA1 计算出来的数字是 <code>commit id</code>(版本号)</p><p>如何版本回退?</p><p>首先,Git 必须知道当前版本是哪个版本,在 Git 中,用 <code>HEAD</code> 表示当前版本,上一个版本是 <code>HEAD^</code>,上上个版本是 <code> HEAD^^</code>,用 <code>HEAD~数字</code>的形式表示具体第几个版本</p><p>使用 <code>git reset</code> 命令回退到上一个版本</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git reset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hard HEAD^^</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git reset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hard HEAD</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">~</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>或者直接输入 <code>commit id</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git reset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hard cdfc070</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Git 的版本回退速度非常快，因为 Git 在内部有个指向当前版本的 HEAD 指针，当你回退版本的时候，Git 仅仅是把 HEAD 从指向 <code>commit id</code>为 <code>cdfc070</code>的版本</p><p>使用 <code>git reflog</code> 获取命令历史,以便确认返回哪个版本</p><h3 id="_2-2-工作区和暂存区" tabindex="-1">2.2 工作区和暂存区 <a class="header-anchor" href="#_2-2-工作区和暂存区" aria-label="Permalink to &quot;2.2 工作区和暂存区&quot;">​</a></h3><p>工作区(Working Directory)是指电脑里能看到的目录,例如当前 git 仓库所在的 <code>learngit</code> 文件夹</p><p>工作区里的 <code>.git</code> 文件夹既是版本库(Repository) 版本库存储最重要的即使暂存区(Stage,或 Index),以及自动创建的第一个分支 <code>master</code></p><p><code>git add</code> 命令是将文件从工作区添加到暂存区 <code>git commit</code> 命令是将暂存区里的所有内容提交到当前分支 <code>master</code> 中</p><h3 id="_2-3-撤销修改" tabindex="-1">2.3 撤销修改 <a class="header-anchor" href="#_2-3-撤销修改" aria-label="Permalink to &quot;2.3 撤销修改&quot;">​</a></h3><p><code>git checkout -- fileName</code> 命令可以撤销指定文件的全部修改,这里包括两种情况</p><blockquote><ol><li>一种是目标文件自修改之后还没放到暂存区,撤销后和版本库的状态一样</li><li>一种是目标文件已提交到暂存区,并且做了修改,撤销后和添加到暂存区时的状态一样</li></ol></blockquote><p>总之，就是让这个文件回到最近一次 <code>git commit</code> 或 <code>git add</code> 时的状态。</p><p><code>git reset HEAD &lt;fileName&gt;</code> 命令可以将暂存区的文件重新放回工作区</p><p>加上 <strong>版本回退</strong> 的方法,构成了撤销修改的三种层级</p><h3 id="_2-4-删除文件" tabindex="-1">2.4 删除文件 <a class="header-anchor" href="#_2-4-删除文件" aria-label="Permalink to &quot;2.4 删除文件&quot;">​</a></h3><p><code>git rm</code> 命令可以删除版本库中的某个文件</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git rm test.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>再次使用 <code>git commit</code>命令确认这一提交</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;remove test.txt&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果 <strong>误删</strong> 可以用 <code>git checkout</code> 命令恢复被删文件</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git checkout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="_3-远程仓库" tabindex="-1">3. 远程仓库 <a class="header-anchor" href="#_3-远程仓库" aria-label="Permalink to &quot;3. 远程仓库&quot;">​</a></h2><h3 id="_3-1-前置步骤" tabindex="-1">3.1 前置步骤 <a class="header-anchor" href="#_3-1-前置步骤" aria-label="Permalink to &quot;3.1 前置步骤&quot;">​</a></h3><p>第一步,创建 SSH Key,user 文件夹下如果没有.ssh 文件夹,使用 windows shell 创建</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ ssh-keygen -t rsa -C &quot;youremail@email.com&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>.ssh 文件夹下的 <code>id_rsa.pub</code> 文件是公共密钥可以放心告诉别人</p><p>第二步,登录 GitHub 在个人设置的 SSH Keys 页面添加新的 SSH Key,填写 title,在 Key 文本框内复制 <code>id_rsa.pub</code> 文件内的所有内容</p><h3 id="_3-2-添加远程库" tabindex="-1">3.2 添加远程库 <a class="header-anchor" href="#_3-2-添加远程库" aria-label="Permalink to &quot;3.2 添加远程库&quot;">​</a></h3><p>第一步,在 GitHub 上创建新的仓库</p><p>第二步,在 learngit 仓库下运行命令:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">// 这是https版,还有SSH版</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git remote </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> origin https://github.com/chengmohai/learngit.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>第三步,执行命令将本地仓库的所有内容推送到远程仓库上:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git push </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u origin master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>git push</code> 命令实现本地向远程仓库的推送,将 <code>master</code> 分支推送到远程</p><p>由于远程地址是空的,第一次推送 <code>master</code> 分支时使用了 <code>-u</code> 参数,Git 不但会把本地的 <code>master</code> 分支内容推送的远程新的 <code>master</code> 分支，还会把本地的 <code>master</code> 分支和远程的 <code>master</code> 分支关联起来，在以后的推送或者拉取时就可以 <strong>简化命令</strong>:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git push origin master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_3-3-ssh-警告" tabindex="-1">3.3 SSH 警告 <a class="header-anchor" href="#_3-3-ssh-警告" aria-label="Permalink to &quot;3.3 SSH 警告&quot;">​</a></h3><p>首次使用 Git 的 <code>clone</code> 或者 <code>push</code> 命令连接 GitHub 时,会得到一个警告:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>The authenticity of host &#39;github.com (xx.xx.xx.xx)&#39; can&#39;t be established.</span></span>
<span class="line"><span>RSA key fingerprint is xx.xx.xx.xx.xx.</span></span>
<span class="line"><span>Are you sure you want to continue connecting (yes/no)?</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这是因为 Git 使用 SSH 连接，而 SSH 连接在第一次验证 GitHub 服务器的 Key 时，需要你确认 GitHub 的 Key 的指纹信息是否真的来自 GitHub 的服务器，输入 <code>yes</code> 回车即可。</p><p>Git 会输出一个警告，告诉你已经把 GitHub 的 Key 添加到本机的一个信任列表里了：</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Warning: Permanently added &#39;github.com&#39; (RSA) to the list of known hosts.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><p>如果你实在担心有人冒充 GitHub 服务器，输入 <code>yes</code> 前可以对照<a href="https://help.github.com/articles/what-are-github-s-ssh-key-fingerprints/" target="_blank" rel="noreferrer">GitHub 的 RSA Key 的指纹信息</a>是否与 SSH 连接给出的一致。</p><h3 id="_3-4-从远程库克隆" tabindex="-1">3.4 从远程库克隆 <a class="header-anchor" href="#_3-4-从远程库克隆" aria-label="Permalink to &quot;3.4 从远程库克隆&quot;">​</a></h3><p><code>git clone</code> 命令从远程仓库将完整的库克隆到本地</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">//SSH版</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git clone git@github.com:chengmohai/learngit.git</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>GitHub 给出的地址有两种, <code>https://</code> 和 <code>git://</code> 两种协议,根据公司内部开放的端口决定使用哪种</p><h3 id="_3-5-修改远程仓库地址" tabindex="-1">3.5 修改远程仓库地址 <a class="header-anchor" href="#_3-5-修改远程仓库地址" aria-label="Permalink to &quot;3.5 修改远程仓库地址&quot;">​</a></h3><p>方法 1: 使用修改命令</p><p><code>git remote origin set-url [url]</code> 命令修改</p><p>方法 2:先删除后增加</p><p><code>git remote rm origin</code></p><p><code>git remote add origin [url]</code></p><h2 id="_4-分支管理" tabindex="-1">4. 分支管理 <a class="header-anchor" href="#_4-分支管理" aria-label="Permalink to &quot;4. 分支管理&quot;">​</a></h2><h3 id="_4-1-创建与合并分支" tabindex="-1">4.1 创建与合并分支 <a class="header-anchor" href="#_4-1-创建与合并分支" aria-label="Permalink to &quot;4.1 创建与合并分支&quot;">​</a></h3><p>第一步,创建 <code>dev</code> 分支,然后切换到 <code>dev</code> 分支</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git checkout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>git checkout</code> 命令加上 <code>-b</code> 参数表示创建并切换,相当于以下两条命令</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git branch dev</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git checkout dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用 <code>git branch</code> 命令可以查看当前分支情况:</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>* dev</span></span>
<span class="line"><span>  master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当前分支前加 <code>*</code> 号</p><p>切换之后即可在 <code>dev</code> 分支上正常提交,例如在 readme.txt 做修改,加入</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Creating a new branch is quick.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后执行 <code>git add</code> 和 <code>git commit</code> 命令</p><p>现在完成 <code>dev</code> 分支的操作后,用 <code>git checkout</code> 命令切回 <code>master</code> 分支:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git checkout master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>切换回 <code>master</code> 分支后发现 readme.txt 文件添加的内容不见了,因为修改是发生在 <code>dev</code> 分支上</p><p>现在通过命令将 <code>dev</code> 分支合并到 <code>master</code> 分支上</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git merge dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>git merge</code> 命令用于合并 <strong>指定的分支</strong> 到当前分支</p><p>此时 readme.txt 文件的内容和 <code>dev</code> 分支提交的内容完全一致</p><p>然后可以放心的删除 <code>dev</code> 分支</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>因为语义问题,新版 Git 启用了更科学的 <code>switch</code> 命令,创建并切换到新的分支 <code>dev</code> 可以用:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git switch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>直接切换到已有分支,如 <code>master</code> 上可以使用</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git switch master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h5 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h5><blockquote><p>查看分支：<code>git branch</code> 创建分支：<code>git branch &lt;name&gt;</code> 切换分支：<code>git checkout &lt;name&gt;</code> 或者 <code>git switch &lt;name&gt;</code> 创建+切换分支：<code>git checkout -b &lt;name&gt;</code> 或者 <code>git switch -c &lt;name&gt;</code> 合并某分支到当前分支：<code>git merge &lt;name&gt;</code> 删除分支：<code>git branch -d &lt;name&gt;</code></p></blockquote><h3 id="_4-2-解决冲突" tabindex="-1">4.2 解决冲突 <a class="header-anchor" href="#_4-2-解决冲突" aria-label="Permalink to &quot;4.2 解决冲突&quot;">​</a></h3><p>在 <code>master</code> 上建立的新分支 <code>feature1</code> 对 readme.txt 文件做了修改并提交</p><p>切回到 <code>master</code> 后对 readme.txt 做了不同于 <code>feature1</code> 的修改并提交</p><p>当要将 <code>feature1</code> 合并到 <code>master</code> 时,发生了合并冲突</p><p>readme.txt 文件显示</p><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Git is a distributed version control system.</span></span>
<span class="line"><span>Git is free software distributed under the GPL.</span></span>
<span class="line"><span>Git has a mutable index called stage.</span></span>
<span class="line"><span>Git tracks changes of files.</span></span>
<span class="line"><span>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADCreating a new branch is quick &amp; simple.</span></span>
<span class="line"><span>=======Creating a new branch is quick AND simple.</span></span>
<span class="line"><span>&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>此时手动修改冲突部分的内容,并再次提交即完成了冲突解决</p><p>通过 <code>git log</code> 命令加上 <code>--graph</code> 参数可以看到具体的合并情况:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pretty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">oneline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abbrev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commit</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   cf810e4 (HEAD </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> master) conflict fixed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">| </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 14096d0 (feature1) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> simple</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | 5dc6824 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> simple</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">|/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b17d20e branch test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d46f35e (origin/master) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test.txt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b84166e </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test.txt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 519219b git tracks changes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e43a48b understand how stage works</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1094adb append GPL</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e475afc </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> distributed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eaadf4e wrote a readme file</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>最后别忘了删除 <code>feature1</code> 分支</p><h3 id="_4-3-分支管理策略" tabindex="-1">4.3 分支管理策略 <a class="header-anchor" href="#_4-3-分支管理策略" aria-label="Permalink to &quot;4.3 分支管理策略&quot;">​</a></h3><p>一般情况下合并分支 Git 都会选择 <code>Fast forward</code> 模式,并且会在删除分支后丢掉分支信息</p><p>禁用 <code>Fast forward</code> 模式会让 Git 在合并时提交一个新的 commit,以保证从分支历史上查到分支信息</p><p>具体操作方式是在执行合并时使用 <code>--no-ff</code> 参数,如:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git merge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ff </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;本次合并使用了no-ff&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>因为本次合并要提交一个新的 commit,所以加上 <code>-m</code> 参数将 commit 描述加进去</p><h4 id="分支策略" tabindex="-1">分支策略 <a class="header-anchor" href="#分支策略" aria-label="Permalink to &quot;分支策略&quot;">​</a></h4><p>实际开发中应按照以下几个原则进行分支管理:</p><blockquote><ol><li>保证 <code>master</code> 分支的稳定性.</li></ol></blockquote><p>主分支是用来发布新版本的,平时不能在上面干活</p><blockquote><ol start="2"><li>修改都在 <code>dev</code> 分支上进行</li></ol></blockquote><p><code>dev</code> 分支是不稳定的，到某个时候，比如 1.0 版本发布时，再把 <code>dev</code> 分支合并到 <code>master</code> 上，在 <code>master</code> 分支发布 1.0 版本；</p><blockquote><ol start="3"><li>如果是多人开发,则在 dev 上建立个人分支,并向 dev 分支合并即可,如</li></ol></blockquote><h3 id="_4-4-bug-分支" tabindex="-1">4.4 BUG 分支 <a class="header-anchor" href="#_4-4-bug-分支" aria-label="Permalink to &quot;4.4 BUG 分支&quot;">​</a></h3><p>当发现 bug 需要修复时,可以在 <code>master</code> 分支上创建一个专门用来修复 bug 的分支,修复完成后再与 <code>master</code> 分支合并</p><p>但如果当前正在 <code>dev</code> 分支上进行正常的代码编写,而且还没到提交的时候,创建 bug 分支并修复可能会影响当前代码的编写,于是可以通过 <code>git stash</code> 命令来储存当前工作现场:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git stash</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>修改完毕后切回 <code>dev</code> 分支继续干活,用 <code>git stash list</code> 命令可以看到当前存储的工作现场</p><p>如何恢复暂存的内容,有两种办法:</p><blockquote><ol><li>用 <code>git stash apply</code> 命令恢复,并用 <code>git stash drop</code> 命令释放暂存的内容</li><li>用 <code>git stash pop</code> 命令恢复的同时删除内容</li></ol></blockquote><p>多次 stash,可以用 <code>git stash list</code> 命令查看,然后恢复指定的 stash,如:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git stash apply stash@{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>因为当前 <code>dev</code> 分支上是 <code>master</code> 分支的完整克隆,所以之前修复的 bug 在 <code>dev</code> 分支上也存在,所以也得将 <code>dev</code> 分支的 bug 清除掉,使用 <code>git cherry-pick &lt;commit&gt;</code> 命令完成 <code>dev</code> 分支上的 bug 修复</p><h3 id="_4-5-feature-分支" tabindex="-1">4.5 Feature 分支 <a class="header-anchor" href="#_4-5-feature-分支" aria-label="Permalink to &quot;4.5 Feature 分支&quot;">​</a></h3><p>在真实的开发中,总有无穷无尽的新功能要不断添加进来,在添加每个新功能前,都要创建一个 feature 分支,完成后再与之前的分支合并,删除 feature 分支</p><p>新分支因为没有完成过 <code>merge</code> 合并,所以 Git 不允许使用 <code>-d</code> 参数删除 feature 分支,这就需要使用 <strong>强力删除</strong> 参数 <code>-D</code></p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">分支名称</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="_4-6-多人协作" tabindex="-1">4.6 多人协作 <a class="header-anchor" href="#_4-6-多人协作" aria-label="Permalink to &quot;4.6 多人协作&quot;">​</a></h3><p><code>git remote -v</code> 命令可以查看远程仓库的信息</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git remote </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">origin  git@github.com:chengmohai/learngit.git (fetch)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">origin  git@github.com:chengmohai/learngit.git (push)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="推送分支" tabindex="-1">推送分支 <a class="header-anchor" href="#推送分支" aria-label="Permalink to &quot;推送分支&quot;">​</a></h4><p>推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git 就会把该分支推送到远程库对应的远程分支上：</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git push origin master</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果推送的是其他分支,例如 <code>dev</code> ,可改成:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git push origin dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果远程仓库没有 <code>dev</code> 分支,这将会在远程仓库中建立一个新的分支</p><h4 id="抓取分支" tabindex="-1">抓取分支 <a class="header-anchor" href="#抓取分支" aria-label="Permalink to &quot;抓取分支&quot;">​</a></h4><p>如果是多人写作,比如两人都在 <code>dev</code> 分支上进行修改,当你 push 到远程仓库时出现了报错,提示你的提交和同伴的提交有冲突,按 Git 的提示应先使用 <code>git pull</code> 命令将最新的 <code>origin/dev</code> 分支抓取下来,在本地合并,解决冲突,再推送到远程仓库</p><p>但如果本地仓库的 <code>dev</code> 分支没有与远程的 <code>origin/dev</code> 分支指定链接,则报错:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">There is no tracking information </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> the current branch.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Please specify which branch you want </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> merge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">See git</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> details.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    git pull </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">remote</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">branch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">If</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> you wish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">to set </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tracking information </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> this branch you can </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> so </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--set-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">upstream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-to=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">origin/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">branch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>可使用以下参数进行链接:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--set-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">upstream</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-to=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">origin/dev dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此时再 <code>git pull</code> 则成功,继续后面的合并,手动修改,提交和推送</p><h4 id="小结-1" tabindex="-1">小结 <a class="header-anchor" href="#小结-1" aria-label="Permalink to &quot;小结&quot;">​</a></h4><ul><li>查看远程库信息，使用 <code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用 <code>git push origin branch-name</code> ，如果推送失败，先用 <code>git pull</code> 抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用 <code>git checkout -b branch-name origin/branch-name</code> ，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用 <code>git branch --set-upstream branch-name origin/branch-name</code> ；</li><li>从远程抓取分支，使用 <code>git pull</code> ，如果有冲突，要先处理冲突。</li></ul><h3 id="_4-7-变基-rebase" tabindex="-1">4.7 变基 (rebase) <a class="header-anchor" href="#_4-7-变基-rebase" aria-label="Permalink to &quot;4.7 变基 (rebase)&quot;">​</a></h3><p>(略)</p><h2 id="_5-标签管理" tabindex="-1">5. 标签管理 <a class="header-anchor" href="#_5-标签管理" aria-label="Permalink to &quot;5. 标签管理&quot;">​</a></h2><p>为什么要使用标签 (tag)?</p><p>相对于 <code>commit id</code> 一串 16 位如同乱码一样的编号, <code>tag</code> 具有语义化的优势,例如给某个提交加上标签 v1.2,便于快速查找和理解</p><h3 id="_5-1-创建标签" tabindex="-1">5.1 创建标签 <a class="header-anchor" href="#_5-1-创建标签" aria-label="Permalink to &quot;5.1 创建标签&quot;">​</a></h3><p>第一步,切换到需要打标签的分支上</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git branch</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dev</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  master</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git checkout master</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Switched </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> branch </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&#39;master&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>第二步,使用 <code>git tag &lt;标签名&gt;</code> 命令可以打一个新的标签,如:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git tag v1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>使用 <code>git tag</code> 查看所有标签</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git tag</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>默认情况下,标签是打给最新一次提交的 commit 上</p><p>对历史提交的 commit 打标签方法是先找到那个 <code>commit id</code> ,然后例如:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">log</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> --</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pretty</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">oneline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">abbrev</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">12a631b (HEAD </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> master, tag: v1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, origin/master) merged bug </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1014c805e2 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bug </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">101</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e1e9c68 merge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ff</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f52c633 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> merge</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cf810e4 conflict fixed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">5dc6824 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> simple</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">14096d0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> simple</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b17d20e branch test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d46f35e </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test.txt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b84166e </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test.txt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">519219b git tracks changes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e43a48b understand how stage works</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">1094adb append GPL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e475afc </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> distributed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">eaadf4e wrote a readme file</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>例如要给 <code>add merge</code> 这次提交打标签,其对应的 commit id 是 <code>f52c633</code> ,则输入:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git tag v0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f52c633</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>再次调用 <code>git tag</code> 命令查看标签:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git tag</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.9</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>具体查看某个标签的信息,使用 <code>git show &lt;标签名&gt;</code> 命令,如:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git show v0.9commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Author: Michael Liao </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">askxuefeng@gmail.com</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:   Fri May </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">56</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">54</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2018</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0800</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> merge</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">diff </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git a/readme.txt b/readme.txt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>还可以对标签提交文字说明,需要加入 <code>-a</code> 参数指定标签名,以及 <code>-m</code> 参数指定说明文字:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git tag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a v0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;version 0.1 released&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1094adb</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p><strong>注意:</strong> 由于标签是挂钩具体的 commit,如果该 commit 再 master 分支和 dev 分支上都有,则该标签也具有跨分支显示的特性</p></blockquote><h4 id="小结-2" tabindex="-1">小结 <a class="header-anchor" href="#小结-2" aria-label="Permalink to &quot;小结&quot;">​</a></h4><ul><li>命令 <code>git tag &lt;tagname&gt;</code> 用于新建一个标签，默认为 <code>HEAD</code> ，也可以指定一个 <code>commit id</code> ；</li><li>命令 <code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code> 可以指定标签信息；</li><li>命令 <code>git tag</code> 可以查看所有标签。</li></ul><h3 id="_5-2-操作标签" tabindex="-1">5.2 操作标签 <a class="header-anchor" href="#_5-2-操作标签" aria-label="Permalink to &quot;5.2 操作标签&quot;">​</a></h3><p>删除标签的方法是:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git tag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d v0.1Deleted tag </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&#39;v0.1&#39; (was f15b0dd)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>将本地标签推送到远程仓库,使用 <code>git push origin &lt;标签名&gt;</code> 命令,如:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git push origin v1.0Total </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (delta </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), reused </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (delta </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">To</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> github.com:michaelliao/learngit.git</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tag]         v1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>以及全部推送尚未推送过的本地标签到远程仓库:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git push origin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tags</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Total </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (delta </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), reused </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (delta </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">To</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> github.com:michaelliao/learngit.git</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tag]         v0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.9</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>删除已推送到远程仓库的标签,需要先删除本地:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git tag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d v0.9Deleted tag </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&#39;v0.9&#39; (was f52c633)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>再删除远程:</p><div class="language-cmd vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cmd</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> git push origin :refs/tags/v0.9To github.com:michaelliao/learngit.git</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [deleted]         v0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.9</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>登录 <code>GitHub</code> 查看远程仓库删除是否成功</p><h4 id="小结-3" tabindex="-1">小结 <a class="header-anchor" href="#小结-3" aria-label="Permalink to &quot;小结&quot;">​</a></h4><ul><li>命令 <code>git push origin &lt;tagname&gt;</code> 可以推送一个本地标签；</li><li>命令 <code>git push origin --tags</code> 可以推送全部未推送过的本地标签；</li><li>命令 <code>git tag -d &lt;tagname&gt;</code> 可以删除一个本地标签；</li><li>命令 <code>git push origin :refs/tags/&lt;tagname&gt;</code> 可以删除一个远程标签。</li></ul>`,230),l=[t];function p(h,d,r,k,c,o){return a(),i("div",null,l)}const u=s(n,[["render",p]]);export{E as __pageData,u as default};
