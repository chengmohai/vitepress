import{_ as e,c as o,o as t,aS as a}from"./chunks/framework.SeHPajDF.js";const h=JSON.parse('{"title":"父子组件传参","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue/20240425001.md","filePath":"vue/vue/20240425001.md","lastUpdated":1715521816000}'),c={name:"vue/vue/20240425001.md"},i=a('<h1 id="父子组件传参" tabindex="-1">父子组件传参 <a class="header-anchor" href="#父子组件传参" aria-label="Permalink to &quot;父子组件传参&quot;">​</a></h1><p>总的来说方法还是很多的</p><ol><li><p>父组件通过<code>v-bind</code>传参，子组件用<code>props</code>接参，最常用的形式</p></li><li><p>子组件绑定回调函数向父组件传参，这种方式通常出现在高级组件封装中</p></li><li><p>子组件绑定事件并用$emit 向父组件传参，父组件在<code>v-on</code>中接参</p></li><li><p>使用<code>provide</code>和<code>inject</code>选项传参，<code>inject</code>接参深度不受限制，父传子，爷传孙都可以。需要注意的是，<code>provide</code> 在使用时需要通过工厂函数的形式传递具有响应式的数据，个人经验来说通常用来传递常量</p></li><li><p>通过 <strong>Vuex</strong> 或 <strong>Pinia</strong> 等状态管理工具实现传参，但究其本源来说，这两个状态管理工具一般被用来存储公共状态，例如用户权限、登录状态、登录信息等等，不太适合用来当传参工具。但迫不得已的话，该用就用呗。</p></li><li><p>路由传参，参见 <strong>Vue Router</strong> 部分</p></li></ol>',3),d=[i];function r(n,s,p,l,_,u){return t(),o("div",null,d)}const m=e(c,[["render",r]]);export{h as __pageData,m as default};
